openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/v1/employees/{id}:
    get:
      tags:
      - employee-controller
      operationId: getEmployeeById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmployeeDto"
    put:
      tags:
      - employee-controller
      operationId: updateEmployee
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Employee"
    delete:
      tags:
      - employee-controller
      operationId: deleteEmployee
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
  /api/v1/departments/{deptNo}:
    get:
      tags:
      - department-controller
      operationId: getDepartment
      parameters:
      - name: deptNo
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DepartmentDto"
    put:
      tags:
      - department-controller
      operationId: updateDepartment
      parameters:
      - name: deptNo
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DepartmentRequestDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DepartmentDto"
    delete:
      tags:
      - department-controller
      operationId: deleteDepartment
      parameters:
      - name: deptNo
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
  /api/v1/employees:
    get:
      tags:
      - employee-controller
      operationId: getAllEmployees
      parameters:
      - name: pageNo
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: lastName
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmployeeDto"
    post:
      tags:
      - employee-controller
      operationId: createEmployee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Employee"
  /api/v1/departments:
    get:
      tags:
      - department-controller
      operationId: getAllDepartments
      parameters:
      - name: pageNo
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: pageSize
        in: query
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DepartmentDto"
    post:
      tags:
      - department-controller
      operationId: createDepartment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DepartmentRequestDto"
        required: true
      responses:
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DepartmentDto"
  /external/pokemon/{name}:
    get:
      tags:
      - poke-api-controller
      operationId: getPokemon
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Pokemon"
  /api/v1/employees/search:
    get:
      tags:
      - employee-controller
      operationId: searchEmployees
      parameters:
      - name: query
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmployeeDto"
  /api/v1/departments/{deptNo}/managers:
    get:
      tags:
      - dept-manager-controller
      operationId: getDepartmentManagers
      parameters:
      - name: deptNo
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmployeeDto"
  /api/v1/departments/{deptNo}/managers/current:
    get:
      tags:
      - dept-manager-controller
      operationId: getCurrentDepartmentManagers
      parameters:
      - name: deptNo
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeptManager"
  /api/v1/departments/{deptNo}/employees:
    get:
      tags:
      - dept-emp-controller
      operationId: getDepartmentEmployees
      parameters:
      - name: deptNo
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeptEmp"
  /api/v1/departments/{deptNo}/employees/current:
    get:
      tags:
      - department-controller
      operationId: getDepartmentWithCurrentEmployees
      parameters:
      - name: deptNo
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmployeeDto"
  /api/v1/departments/{deptNo}/employees/current/all:
    get:
      tags:
      - dept-emp-controller
      operationId: getCurrentDepartmentEmployees
      parameters:
      - name: deptNo
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 20
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmployeeDto"
components:
  schemas:
    Employee:
      type: object
      properties:
        id:
          type: integer
          format: int32
        birthDate:
          type: string
          format: date
        firstName:
          type: string
        lastName:
          type: string
        hireDate:
          type: string
          format: date
    DepartmentRequestDto:
      type: object
      properties:
        deptNo:
          type: string
        deptName:
          type: string
    DepartmentDto:
      type: object
      properties:
        deptNo:
          type: string
        deptName:
          type: string
        managers:
          type: array
          items:
            $ref: "#/components/schemas/EmployeeDto"
    EmployeeDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        hireDate:
          type: string
          format: date
        birthDate:
          type: string
          format: date
        department:
          type: string
        title:
          type: string
        salary:
          type: integer
          format: int32
    Pokemon:
      type: object
      properties:
        name:
          type: string
        sprites:
          type: object
          additionalProperties:
            type: object
        imageUrl:
          type: string
    Department:
      type: object
      properties:
        deptNo:
          type: string
        deptName:
          type: string
    DeptManager:
      required:
      - fromDate
      - toDate
      type: object
      properties:
        id:
          $ref: "#/components/schemas/DeptManagerId"
        department:
          $ref: "#/components/schemas/Department"
        fromDate:
          type: string
          format: date
        toDate:
          type: string
          format: date
    DeptManagerId:
      type: object
      properties:
        empNo:
          type: integer
          format: int32
        deptNo:
          type: string
    DeptEmp:
      required:
      - fromDate
      - toDate
      type: object
      properties:
        id:
          $ref: "#/components/schemas/DeptEmpId"
        fromDate:
          type: string
          format: date
        toDate:
          type: string
          format: date
    DeptEmpId:
      type: object
      properties:
        empNo:
          type: integer
          format: int32
        deptNo:
          type: string
